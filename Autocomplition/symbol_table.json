{"symbols": [{"name": "CPU_CACHE_Enable", "signature": ""}, {"name": "CPU_CACHE_Enable", "signature": ""}, {"name": "CPU_CACHE_Enable", "signature": ""}, {"name": "CallConstructors", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_Handler", "signature": ""}, {"name": "Error_handler", "signature": ""}, {"name": "EthCyclicTaskFunc", "signature": ""}, {"name": "HAL_DAC_MspDeInit", "signature": ""}, {"name": "HAL_Delay", "signature": ""}, {"name": "HAL_Delay", "signature": ""}, {"name": "HAL_SD_MspDeInit", "signature": ""}, {"name": "HAL_TIM_PeriodElapsedCallback", "signature": ""}, {"name": "HAL_UART_MspDeInit", "signature": ""}, {"name": "HAL_UART_MspDeInit", "signature": ""}, {"name": "HAL_UART_MspDeInit", "signature": ""}, {"name": "HAL_UART_MspDeInit", "signature": ""}, {"name": "HardFault_Handler", "signature": ""}, {"name": "IRx_SYNC_IRQHandler", "signature": ""}, {"name": "LCD1602_PrintFloat", "signature": ""}, {"name": "LPM_EnterSleepMode", "signature": ""}, {"name": "SFU_TEST_Error", "signature": ""}, {"name": "SPI3_IRQHandler", "signature": ""}, {"name": "SendSigfox", "signature": ""}, {"name": "StartBlinkLedTask", "signature": ""}, {"name": "SystemClock_Config", "signature": ""}, {"name": "SystemClock_Config", "signature": ""}, {"name": "SystemClock_Config", "signature": ""}, {"name": "TIM3_IRQHandler", "signature": ""}, {"name": "USART1_IRQHandler", "signature": ""}, {"name": "__at_write", "signature": ""}, {"name": "__at_write", "signature": ""}, {"name": "_write", "signature": ""}, {"name": "application_entry", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "assert_failed", "signature": ""}, {"name": "atiny_reboot", "signature": ""}, {"name": "azure_iot_nx_client_entry", "signature": ""}, {"name": "cliGpio", "signature": ""}, {"name": "ether_select", "signature": ""}, {"name": "example_main_double_tap_lsm6dsox", "signature": ""}, {"name": "example_main_lsm6dsox", "signature": ""}, {"name": "i", "signature": ""}, {"name": "i2cCmdif", "signature": ""}, {"name": "ledButtonCheck", "signature": ""}, {"name": "leds_off", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main", "signature": ""}, {"name": "main_entry", "signature": ""}, {"name": "noteSendToGatewayAsync", "signature": ""}, {"name": "platform_init", "signature": ""}, {"name": "platform_init", "signature": ""}, {"name": "platform_read_int_pin", "signature": ""}, {"name": "platform_reap_int_pin", "signature": ""}, {"name": "prvSetupHardware", "signature": ""}, {"name": "prvSetupHardware", "signature": ""}, {"name": "prvSetupHardware", "signature": ""}, {"name": "reverse", "signature": ""}, {"name": "serial_puth", "signature": ""}, {"name": "standard_app_demo_main", "signature": ""}, {"name": "system_init", "signature": ""}], "snippets": ["\"--- KETCube base period # %d ---\", basePeriodCnt++);", "\"POR detected - reseting!\");", "\"Temperature [degC]:%6.2f\\\\r\\\\n\",", "&& (key_pressed >= '0' && key_pressed <= '3'))", "&& key_pressed <= '2')", "&& key_pressed <= '9')) {", "(KETCUBE_CFG_SEVERITY_DEBUG,", "(datetimestring[5] == '0' && datetimestring[6] == '2')", "(void)LOS_Start();", ")", "*begin = *end;", "*end = tmp;", "++begin;", "--end;", "ADC1_Init();", "APP_LOG(TS_OFF, VLEVEL_L, \" done\\\\n\\\\r\");", "APP_LOG(TS_ON, VLEVEL_L, \"sending temperature=%d degC,  battery=%d mV\", temperature, batteryLevel);", "BACK_COLOR = BLUE;", "BACK_COLOR = WHITE;", "BEEP_Init();", "BSP_LED_Init(LED1);", "BSP_LED_Off(LED_BLUE);", "BSP_LED_On(LED5);", "BSP_LED_On(LED_BLUE);", "BSP_LED_Toggle(LED_GREEN);", "Blink(3);", "CC1125_Init();", "CF1 = CF_list[rand()%5];", "CF2= CF1 + 400000;", "CPU_CACHE_Enable();", "Control_GPIO_Init();", "DBG_Init();", "DBG_PRINTF(\"Error_Handler\\\\n\\\\r\");", "DISABLE_IRQ();", "DKFPRINTF(0x08, \"return=%d\\\\n\", rtn);", "DKFPRINTF(0x08, \"timeout = %d\\\\n\", timeout);", "Debounce = 0;", "Debounce = 1;", "ENABLE_IRQ();", "EXTI_Init();", "EnvSensors_Read(&sensor_data);", "Error_Handler();", "GNSE_RTC_DelayMs(Delay);", "HAL_DMA_DeInit(huart->hdmarx);", "HAL_DMA_DeInit(huart->hdmatx);", "HAL_DMA_DeInit(sdHandle->hdmarx);", "HAL_DMA_DeInit(sdHandle->hdmatx);", "HAL_DMA_DeInit(uartHandle->hdmarx);", "HAL_Delay(200);", "HAL_Delay(5);", "HAL_Delay(currentDelayMs);", "HAL_EXTI_EdgeConfig( EXTI_LINE0, EXTI_RISING_EDGE );", "HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_15);", "HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);", "HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);", "HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);", "HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);", "HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11", "HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);", "HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);", "HAL_GPIO_EXTI_IRQHandler(IRx_SYNC_PIN);", "HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);", "HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);", "HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);", "HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);", "HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);", "HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);", "HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);", "HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);", "HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);", "HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, (flashes & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);", "HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, blueWasOn ? GPIO_PIN_SET : GPIO_PIN_RESET);", "HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, (flashes & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);", "HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, greenWasOn ? GPIO_PIN_SET : GPIO_PIN_RESET);", "HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, (flashes & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);", "HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, redWasOn ? GPIO_PIN_SET : GPIO_PIN_RESET);", "HAL_Init();", "HAL_MPU_ConfigRegion(&MPU_InitStruct);", "HAL_MPU_Disable();", "HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);", "HAL_NVIC_DisableIRQ(SDIO_IRQn);", "HAL_NVIC_DisableIRQ(USART1_IRQn);", "HAL_NVIC_DisableIRQ(USART2_IRQn);", "HAL_NVIC_DisableIRQ(USART3_IRQn);", "HAL_NVIC_EnableIRQ( EXTI1_IRQn );", "HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);", "HAL_NVIC_SetPriority( EXTI1_IRQn, 0xFU, 0U );", "HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);", "HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);", "HAL_NVIC_SystemReset();", "HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);", "HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);", "HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, MAGIC_TEST_DONE);", "HAL_SPI_IRQHandler(&hspi);", "HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);", "HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);", "HAL_StatusTypeDef ret = HAL_OK;", "HAL_TIM_IRQHandler(&htim3);", "HAL_UART_Transmit(&UART1_Handler, (uint8_t *)USART_RX_BUF, len, 1000);", "HW_Init();", "HW_SPI_Init();", "HardWare_Init();", "IOT_DEVICE_ID,", "IOT_HUB_HOSTNAME,", "IOT_PRIMARY_KEY)))", "JAddNumberToObject(req, \"time\", NoteTimeST());", "KETCube_ErrorHandler();", "KETCube_Initialized = TRUE;", "KETCube_PeriodTimerElapsed = FALSE;", "KEY_Init();", "LCD1602_print(numStr);", "LCD_Clear(BLACK);", "LCD_Clear(BLUE);", "LCD_DrawLine( 0, 80, 239, 80);", "LCD_DrawLine( 119, 0, 119, 160);", "LCD_DrawRectangle( 0, 0, 239, 160);", "LCD_DrawRectangle( 1, 1, 238, 159);", "LCD_DrawRectangle( 12, 8, 227, 152);", "LCD_DrawRectangle( 14, 185, 225, 315);", "LCD_DrawRectangle( 15, 186, 224, 314);", "LCD_DrawRectangle( 16, 187, 223, 313);", "LCD_DrawRectangle( 66, 44, 173, 116);", "LCD_Fill( 0, 0, 239, 160, WHITE);", "LCD_Fill( 17, 188, 222, 312, WHITE);", "LCD_Init();", "LCD_ShowNum( 40, 238, -x, 3, 16);", "LCD_ShowNum( 40, 238, x, 3, 16);", "LCD_ShowNum( 40, 254, -y, 3, 16);", "LCD_ShowNum( 40, 254, y, 3, 16);", "LCD_ShowNum( 56, 190, Ladc1, 6, 16);", "LCD_ShowNum( 56, 206, Ladc2, 6, 16);", "LCD_ShowNum( 56, 222, Ladc3, 6, 16);", "LCD_ShowString( 20, 190, 240, 16, 16, \"ADC1: \");", "LCD_ShowString( 20, 206, 240, 16, 16, \"ADC2: \");", "LCD_ShowString( 20, 222, 240, 16, 16, \"ADC3: \");", "LCD_ShowString( 20, 238, 240, 16, 16, \"x: \");", "LCD_ShowString( 20, 254, 240, 16, 16, \"y: \");", "LCD_ShowString( 20, 270, 240, 16, 16, \"pen down\");", "LCD_ShowString( 20, 270, 240, 16, 16, \"pen up      \");", "LCD_ShowString( 35, 238, 240, 16, 16, \" \");", "LCD_ShowString( 35, 238, 240, 16, 16, \"-\");", "LCD_ShowString( 40, 254, 240, 16, 16, \" \");", "LCD_ShowString( 40, 254, 240, 16, 16, \"-\");", "LCD_ShowString( 42, 161,240, 24, 24, \"Paramter List\");", "LCD_ShowString( 70, 238, 240, 16, 16, \"mm\");", "LCD_ShowString( 70, 254, 240, 16, 16, \"mm\");", "LCD_ShowString(10, 10, 200, 16, 24, \"Welcome to BearPi\");", "LCD_ShowString(10, 110, 200, 16, 16, \"NCDP_PORT:\");", "LCD_ShowString(10, 80, 200, 16, 16, \"NCDP_IP:\");", "LCD_ShowString(100, 110, 200, 16, 16, cn_app_port);", "LCD_ShowString(30, 40, 200, 16, 24, \"Manhole Demo\");", "LCD_ShowString(80, 80, 200, 16, 16, cn_app_server);", "LED_Init();", "LOG_I(common, \"FreeRTOS Running\");", "LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);", "Led = 1;", "Led = 2;", "Led = 3;", "LoRa_Generate_Double_Packet(packet_freq_points_No1,symbol_len_No1,packet_freq_points_No2,symbol_len_No2);", "LoRa_Generate_Double_Packet(packet_freq_points_No1,symbol_len_No1,packet_freq_points_No2,symbol_len_No2,CF1,CF2);", "LoRa_Generate_Signal(packet_freq_points_No1,symbol_len_No1);", "LoRa_Generate_Signal(packet_freq_points_No1,symbol_len_No1,CF);", "LoRa_Generate_Signal_With_Blank(packet_freq_points_No1,symbol_len_No1,LOOK_BLANK_RATIO);", "LoRa_Generate_Signal_With_Blank(packet_freq_points_No1,symbol_len_No1,LOOK_BLANK_RATIO,RF_FREQUENCY_NO1);", "LowPower_Handler();", "MPU_Config();", "MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;", "MPU_InitStruct.BaseAddress = D3_SRAM_BASE;", "MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;", "MPU_InitStruct.Enable = MPU_REGION_ENABLE;", "MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;", "MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;", "MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;", "MPU_InitStruct.Number = MPU_REGION_NUMBER0;", "MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;", "MPU_InitStruct.SubRegionDisable = 0x00;", "MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;", "MPU_Region_InitTypeDef MPU_InitStruct;", "MX_LWIP_Init();", "NVIC_SystemReset();", "NX_IP* ip_ptr, NX_PACKET_POOL* pool_ptr, NX_DNS* dns_ptr, UINT (*unix_time_callback)(ULONG* unix_time))", "POINT_COLOR = BLACK;", "POINT_COLOR = BROWN;", "POINT_COLOR = GREEN;", "POINT_COLOR = MAGENTA;", "POINT_COLOR = RED;", "PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;", "PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;", "RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1 );", "RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;", "RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;", "RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;", "RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;", "RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;", "RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;", "RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;", "RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;", "RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;", "RCC_ClkInitStruct.ClockType = ( RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \\\\", "RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);", "RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK", "RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;", "RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;", "RCC_ClkInitTypeDef RCC_ClkInitStruct;", "RCC_OscInitStruct.CSIState = RCC_CSI_OFF;", "RCC_OscInitStruct.HSEState = RCC_HSE_ON;", "RCC_OscInitStruct.HSICalibrationValue = 16;", "RCC_OscInitStruct.HSIState = RCC_HSI_OFF;", "RCC_OscInitStruct.HSIState = RCC_HSI_ON;", "RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;", "RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;", "RCC_OscInitStruct.PLL.PLLFRACN = 0;", "RCC_OscInitStruct.PLL.PLLM = 25;", "RCC_OscInitStruct.PLL.PLLM = 5;", "RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;", "RCC_OscInitStruct.PLL.PLLN = 160;", "RCC_OscInitStruct.PLL.PLLN = 432;", "RCC_OscInitStruct.PLL.PLLP = 2;", "RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;", "RCC_OscInitStruct.PLL.PLLQ = 4;", "RCC_OscInitStruct.PLL.PLLQ = 9;", "RCC_OscInitStruct.PLL.PLLR = 2;", "RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;", "RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;", "RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;", "RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;", "RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;", "RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;", "RCC_OscInitTypeDef RCC_OscInitStruct;", "RCC_PeriphCLKInitTypeDef PeriphClkInit;", "Radio.Init(&RadioEvents);", "Radio.SetChannel(CF);", "Radio.SetTxContinuousWave(CF,TX_OUTPUT_POWER,3);", "SCB_EnableDCache();", "SCB_EnableICache();", "SIGFOX_API_send_frame(ul_msg, ul_size, dl_msg, nbTxRepeatFlag, SFX_FALSE);", "SPI1_Init();", "SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );", "SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );", "SX1276Write( REG_OCP, ( SX1276Read( REG_OCP ) & RF_OCP_MASK ) | RF_OCP_OFF );", "SX1276Write( REG_OSC, RF_OSC_CLKOUT_1_MHZ );", "SX1276Write( REG_PARAMP, ( SX1276Read( REG_PARAMP ) & RF_PARAMP_MASK ) | RF_PARAMP_0010_US );", "SX1276Write( REG_PARAMP, ( SX1276Read( REG_PARAMP ) & RF_PARAMP_MODULATIONSHAPING_MASK ) | RF_PARAMP_MODULATIONSHAPING_00 );", "SX1276Write( REG_PLL, ( SX1276Read( REG_PLL ) & RF_PLL_BANDWIDTH_MASK ) | RF_PLL_BANDWIDTH_150 );", "SX1276Write( REG_PLLHOP, ( SX1276Read( REG_PLLHOP ) & RF_PLLHOP_FASTHOP_MASK ) | RF_PLLHOP_FASTHOP_ON );", "SYS_LED_Off(SYS_LED_BLUE);", "SYS_LED_On(SYS_LED_BLUE);", "Stm32_Clock_Init(RCC_PLL_MUL9);", "SystemClock_Config();", "TIM3_Init(719, 199);", "TIMER_IF_DelayMs(Delay);", "TickType_t EthCyclicTaskPeriod=pdMS_TO_TICKS(1);", "TickType_t xLastWakeTime=xTaskGetTickCount();", "TimerInit(&KETCube_PeriodTimer, KETCube_PeriodElapsed);", "TimerSetValue(&KETCube_PeriodTimer, ketCube_coreCfg.startDelay);", "TimerStart(&KETCube_PeriodTimer);", "Tx_Buffer[j] = 0x31;", "Tx_Buffer[k]=rand()%255;", "UINT azure_iot_nx_client_entry(", "UINT status;", "UINT32 uwRet = LOS_OK;", "USART_RX_STA = 0;", "__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);", "__HAL_RCC_DAC12_FORCE_RESET();", "__HAL_RCC_DAC12_RELEASE_RESET();", "__HAL_RCC_SDIO_CLK_DISABLE();", "__HAL_RCC_USART1_CLK_DISABLE();", "__HAL_RCC_USART2_CLK_DISABLE();", "__HAL_RCC_USART3_CLK_DISABLE();", "__USART2_CLK_DISABLE();", "__asm volatile ( \"NOP\" );", "_main_sys_random_init();", "acceleration_mg[0] =", "acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);", "acceleration_mg[1] =", "acceleration_mg[2] =", "angular_rate_mdps[0] =", "angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);", "angular_rate_mdps[1] =", "angular_rate_mdps[2] =", "azure_iot_nx_client_enable_c2d(&azure_iot_nx_client, c2d_thread_entry);", "azure_iot_nx_client_enable_device_twin(&azure_iot_nx_client, device_twin_thread_entry);", "azure_iot_nx_client_enable_direct_method(&azure_iot_nx_client, direct_method_thread_entry);", "azure_iot_nx_client_enable_telemetry(&azure_iot_nx_client, telemetry_thread_entry);", "bc35_28_95_sal_init(HAL_UART_PORT_0);", "benchmark_test(arg) ;", "bool blueWasOn = HAL_GPIO_ReadPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin) != GPIO_PIN_RESET;", "bool greenWasOn = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin) != GPIO_PIN_RESET;", "bool i2c_ret;", "bool redWasOn = HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin) != GPIO_PIN_RESET;", "bool ret = false;", "bool ret = true;", "break;", "buff[20] = 0;", "buff[i] = cpos == i ? '^' : ' ';", "c1 = TIC();", "c2 = TIC();", "c3 = TIC();", "c4 = TIC();", "call_constructors(&link_constructors_location, &link_constructors_end);", "case 0:", "case 1:", "case 2:", "case 3:", "case 4:", "case 5:", "ch       = print_ch - 1;", "ch   = (uint8_t)args->getData(1);", "ch = (uint8_t)args->getData(1);", "char numStr[16];", "cliPrintf(\"%d\", gpioPinRead(i));", "cliPrintf(\"\\\\n\");", "cliPrintf(\"gpio read %d : %d\\\\n\", ch, gpioPinRead(ch));", "cliPrintf(\"gpio read ch[0~%d]\\\\n\", GPIO_MAX_CH-1);", "cliPrintf(\"gpio show\\\\n\");", "cliPrintf(\"gpio write %d : %d\\\\n\", ch, data);", "cliPrintf(\"gpio write ch[0~%d] 0:1\\\\n\", GPIO_MAX_CH-1);", "cmdifPrintf( \"i2c begin channel[1~%d]\\\\n\", I2C_MAX_CH);", "cmdifPrintf( \"i2c read channel dev_addr reg_addr length\\\\n\");", "cmdifPrintf(\"%d I2C - 0x%02X : 0x%02X\\\\n\", print_ch, reg_addr+i, i2c_data[0]);", "cmdifPrintf(\"%d I2C - Fail \\\\n\", print_ch);", "cmdifPrintf(\"I2C CH%d Begin Fail\\\\n\", print_ch + 1);", "cmdifPrintf(\"I2C CH%d Begin OK\\\\n\", print_ch + 1);", "coap_basic_thread();", "configASSERT( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_4 ) == HAL_OK );", "configASSERT( HAL_RCC_OscConfig( &RCC_OscInitStruct ) == HAL_OK );", "count = len;", "count++;", "count--;", "counter = 0;", "ctime(&t);", "currentDelayMs -= currentDelayMs < 250 ? 0 : 200;", "data = (uint8_t)args->getData(2);", "datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )DATA_RATE );", "datetimestring[cpos] = key_pressed;", "default: ;", "delay(100);", "delay_init(72);", "delay_init(80);", "delay_ms(10);", "delay_ms(300);", "delay_ms(500);", "delay_ms(INTERVAL_TIME);", "dev_addr = (uint16_t) cmdifGetParam(2);", "dev_ctx.handle = &hi2c1;", "dev_ctx.read_reg = platform_read;", "dev_ctx.write_reg = platform_write;", "dns_init();", "dns_ptr,", "do {", "draw_point_graph( x, y, 119, 80, BLACK);", "else", "else if (all_source.tap_src.y_tap)", "else if (cmdifGetParamCnt() == 5)", "else if(huart->Instance==USART2)", "energest_init();", "esp8266_join_ap(\"SheldonDai\", \"srnr6x9xbhmb0\");", "esp8266_sal_init(HAL_UART_PORT_0);", "extern int bc35_28_95_sal_init(hal_uart_port_t uart_port);", "extern int esp8266_join_ap(const char *ssid, const char *pwd);", "extern int esp8266_sal_init(hal_uart_port_t uart_port);", "extern void mqtt_basic_thread(void);", "extern void shell_uart_init(int baud);", "flashes++;", "for ( int32_t __i = 0 ; __i < len; __i++ )", "for (i=0; i<length; i++)", "for (int i = 0 ; i < 20 ; i++)", "for (int i=0; i<GPIO_MAX_CH; i++)", "for (int j = 0; j < BufferSize; j++)", "for(;;)", "for(i=0;i<PACKET_COUNT;i++)", "for(int k=0;k<BUFFER_SIZE;k++)", "free(packet_freq_points_No1);", "free(packet_freq_points_No2);", "gpioPinWrite(ch, data);", "hUART.Instance->TDR = ((uint32_t)((*ptr++)));", "hex += '0';", "hex += 7;", "hex = val & 0x0F;", "humidity    = (uint16_t) sensor_data.humidity;", "i2c_ret = i2cBegin(print_ch, 400);", "i2c_ret = i2cReadByte(ch, dev_addr, reg_addr+i, i2c_data, 100);", "if (!count) strcpy(datetimestring, \"20yy-mm-dd HH:MM:SS\");", "if ((datetimestring[5] == '1' && key_pressed >= '0'", "if ((key_pressed != '3' || !", "if ((status = azure_iot_nx_client_connect(&azure_iot_nx_client)))", "if ((status = azure_iot_nx_client_create(&azure_iot_nx_client,", "if ((status = tx_event_flags_create(&azure_iot_flags, \"Azure IoT flags\")))", "if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == (BUTTON1_ACTIVE_HIGH ? GPIO_PIN_RESET : GPIO_PIN_SET)) {", "if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)", "if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)", "if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)", "if (KETCube_PeriodTimerElapsed == TRUE) {", "if (KETCube_wasResetPOR == TRUE) {", "if (NoteTimeValidST()) {", "if (all_source.tap_src.double_tap)", "if (all_source.tap_src.single_tap)", "if (all_source.tap_src.tap_sign)", "if (all_source.tap_src.x_tap)", "if (args->argc == 1 && args->isStr(0, \"show\") == true)", "if (args->argc == 2 && args->isStr(0, \"read\") == true)", "if (args->argc == 3 && args->isStr(0, \"write\") == true)", "if (cmdifGetParamCnt() == 2)", "if (flashes >= 1) {", "if (hex > '9')", "if (huart->Instance==USART2) {", "if (i2c_ret == true)", "if (ketCube_modules_Init() != KETCUBE_CFG_OK) {", "if (ketCube_modules_SleepEnter() == KETCUBE_CFG_OK) {", "if (key_pressed == 'D') {", "if (key_pressed >= '0' && key_pressed <= '1') {", "if (key_pressed >= '0' && key_pressed <= '9') {", "if (key_pressed) {", "if (prevQuartile != quartile) {", "if (reg.status_reg.gda)", "if (reg.status_reg.tda)", "if (reg.status_reg.xlda)", "if (ret != true)", "if (ret == false)", "if (uwRet != LOS_OK)", "if (whoamI != LSM6DSOX_ID)", "if( y< 0)", "if((Debounce == 1)&&(read_gpio(pb1)==HIGH))", "if(Ladc3 > 695)", "if(USART_RX_STA & 0x8000)", "if(cmdifHasString(\"begin\", 0) == true)", "if(cmdifHasString(\"read\", 0) == true)", "if(huart->Instance==USART1)", "if(penState == 1)", "if(ptCentral->gogogo){", "if(read_gpio(pb1)==LOW)", "if(ret != HAL_OK)", "if(sdHandle->Instance==SDIO)", "if(times % 200 == 0)printf(\"\u8bf7\u8f93\u5165\u6570\u636e,\u4ee5\u56de\u8f66\u952e\u7ed3\u675f\\\\r\\\\n\");", "if(times % 30 == 0)LED0 = !LED0;", "if(times % 5000 == 0)", "if(uartHandle->Instance==USART2)", "if(uartHandle->Instance==USART3)", "if(x < 0)", "init();", "init_filesystem ();", "init_gpio(led1, OUTPUT);", "init_gpio(led2, OUTPUT);", "init_gpio(led3, OUTPUT);", "init_gpio(pb1, INPUT);", "init_sysclk_216MHz();", "int *LoRa_ID_Start_Freq_No1 = NULL;", "int *LoRa_ID_Start_Freq_No2 = NULL;", "int *LoRa_Payload_Start_Freq_No1 = NULL;", "int *LoRa_Payload_Start_Freq_No2 = NULL;", "int *packet_freq_points_No1 = NULL;", "int *packet_freq_points_No2 = NULL;", "int CF = CF_list[0];", "int CF1= CF_list[0];", "int CF2= CF1 + 400000;", "int CF_list[8]={486300000,486500000,486700000,486900000,487100000,487300000,487500000,487700000};", "int Debounce = 0;", "int Led = 1;", "int _write(int file, char const *ptr, int len)", "int flashes = 0;", "int main()", "int main(void)", "int rtn = 0;", "int standard_app_demo_main()", "int symbol_len_No1 = NULL;", "int symbol_len_No2 = NULL;", "int16_t temperature = SYS_GetTemperatureLevel() >> 8;", "int1_route.md1_cfg.int1_double_tap = PROPERTY_ENABLE;", "int1_route.md1_cfg.int1_single_tap = PROPERTY_ENABLE;", "int2_route.md2_cfg.int2_double_tap = PROPERTY_ENABLE;", "int2_route.md2_cfg.int2_single_tap = PROPERTY_ENABLE;", "int32_t c1,c2;", "int32_t c3=0;", "int32_t c4=0;", "int32_t count = 0;", "ip_ptr,", "iprintf(\"ERROR!\");", "iprintf(\"\\\\r\\\\n\\\\r\\\\n\");", "ketCube_modules_ExecutePeriodic();", "ketCube_modules_ProcessMsgs();", "ketCube_modules_SleepExit();", "ketCube_remoteTerminal_ProcessCMD();", "ketCube_terminal_CoreSeverityPrintln", "ketCube_terminal_CoreSeverityPrintln(KETCUBE_CFG_SEVERITY_INFO,", "ketCube_terminal_Init();", "ketCube_terminal_ProcessCMD();", "krhino_intrpt_enter();", "krhino_intrpt_exit();", "ledsEnabledMs = TIMER_IF_GetTimeMs();", "len = USART_RX_STA & 0x3fff;", "length   = (uint16_t) cmdifGetParam(4);", "link_test();", "log_init(NULL, NULL, NULL);", "lsm6dsox_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);", "lsm6dsox_all_sources_get(&dev_ctx, &all_source);", "lsm6dsox_all_sources_t all_source;", "lsm6dsox_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate.u8bit);", "lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_ctx_t dev_ctx;", "lsm6dsox_device_id_get(&dev_ctx, &whoamI);", "lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate.i16bit[0]);", "lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate.i16bit[1]);", "lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate.i16bit[2]);", "lsm6dsox_from_fs2_to_mg(data_raw_acceleration.i16bit[0]);", "lsm6dsox_from_fs2_to_mg(data_raw_acceleration.i16bit[1]);", "lsm6dsox_from_fs2_to_mg(data_raw_acceleration.i16bit[2]);", "lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_12Hz5);", "lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_2000dps);", "lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);", "lsm6dsox_pin_int1_route_get(&dev_ctx, &int1_route);", "lsm6dsox_pin_int1_route_set(&dev_ctx, &int1_route);", "lsm6dsox_pin_int1_route_t int1_route;", "lsm6dsox_pin_int2_route_get(&dev_ctx, &int2_route);", "lsm6dsox_pin_int2_route_set(&dev_ctx, &int2_route);", "lsm6dsox_pin_int2_route_t int2_route;", "lsm6dsox_reg_t reg;", "lsm6dsox_reset_get(&dev_ctx, &rst);", "lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_status_reg_get(&dev_ctx, &reg.status_reg);", "lsm6dsox_tap_detection_on_x_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_tap_detection_on_y_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_tap_detection_on_z_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_tap_dur_set(&dev_ctx, 0x07);", "lsm6dsox_tap_mode_set(&dev_ctx, LSM6DSOX_BOTH_SINGLE_DOUBLE);", "lsm6dsox_tap_quiet_set(&dev_ctx, 0x03);", "lsm6dsox_tap_shock_set(&dev_ctx, 0x03);", "lsm6dsox_tap_threshold_x_set(&dev_ctx, 0x08);", "lsm6dsox_tap_threshold_y_set(&dev_ctx, 0x08);", "lsm6dsox_tap_threshold_z_set(&dev_ctx, 0x08);", "lsm6dsox_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);", "lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_12Hz5);", "lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_417Hz);", "lsm6dsox_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);", "lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_2g);", "lsm6dsox_xl_hp_path_on_out_set(&dev_ctx, LSM6DSOX_LP_ODR_DIV_100);", "memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));", "memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));", "memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));", "nvdm_init();", "osDelay(250);", "osal_semp_create(&s_rcv_sync,1,0);", "osal_task_create(\"app_collect\",app_collect_task_entry,NULL,0x400,NULL,3);", "osal_task_create(\"app_report\",app_report_task_entry,NULL,0x1000,NULL,2);", "packet_freq_points_No1 = LoRa_Channel_Coding(data_0x001D004E, 235, LORA_BW, LORA_SF_NO1, LORA_CR_NO1, LORA_HAS_CRC_NO1, LORA_IMPL_HEAD_NO1, &symbol_len_No1, LORA_LOWDATERATEOPTIMIZE_NO1);", "packet_freq_points_No1 = LoRa_Channel_Coding(data_0x001D004E, 64, LORA_BW, LORA_SF_NO1, LORA_CR_NO1, LORA_HAS_CRC_NO1, LORA_IMPL_HEAD_NO1, &symbol_len_No1, LORA_LOWDATERATEOPTIMIZE_NO1);", "packet_freq_points_No2 = LoRa_Channel_Coding(data_0x001D004E, 64, LORA_BW, LORA_SF_NO2, LORA_CR_NO2, LORA_HAS_CRC_NO2, LORA_IMPL_HEAD_NO2, &symbol_len_No2, LORA_LOWDATERATEOPTIMIZE_NO2);", "packet_freq_points_No2 = LoRa_Channel_Coding(data_0x00420029, 64, LORA_BW, LORA_SF_NO2, LORA_CR_NO2, LORA_HAS_CRC_NO2, LORA_IMPL_HEAD_NO2, &symbol_len_No2, LORA_LOWDATERATEOPTIMIZE_NO2);", "penState = 0;", "penState = 1;", "platform_init();", "pool_ptr,", "pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);", "prevQuartile = quartile;", "print_ch -= 1;", "print_ch = (uint16_t) cmdifGetParam(1);", "print_ch = constrain(print_ch, 1, I2C_MAX_CH);", "printf( \"Wrong parameters value: file %s on line %lu\\\\r\\\\n\", ( const char* )file, line );", "printf(\" ===> KO!!!!!\");", "printf(\"%lf,%lf\\\\r\\\\n\",x,y);", "printf(\"=== End: Crypt Benchmark  ===\\\\n\") ;", "printf(\"=== Start: Crypt Benchmark ===\\\\n\") ;", "printf(\"CR=4/%d, CRC=%s, IMPL_HEAD=%s, LDR=%s\\\\n\",4+LORA_CR_NO1,LORA_HAS_CRC_NO1?\"ON\":\"OFF\",LORA_IMPL_HEAD_NO1?\"ON\":\"OFF\",LORA_LOWDATERATEOPTIMIZE_NO1?\"ON\":\"OFF\");", "printf(\"ERROR: failed to connect iot client 0x%08x\\\\r\\\\n\", status);", "printf(\"ERROR: failed to create iot client 0x%08x\\\\r\\\\n\", status);", "printf(\"FAIL: Unable to create nx_client event flags (0x%02x)\\\\r\\\\n\", status);", "printf(\"FREQ1:%d,sf1:%d,\\\\r\\\\nFREQ2:%d,sf2:%d\\\\r\\\\n\",CF,LORA_SF_NO1,CF2,LORA_SF_NO2);", "printf(\"FREQ1:%d,sf1:%d,\\\\r\\\\nFREQ2:%d,sf2:%d\\\\r\\\\n\",RF_FREQUENCY_NO1,LORA_SF_NO1,RF_FREQUENCY_NO2,LORA_SF_NO2);", "printf(\"Hard Fault\\\\n\");", "printf(\"This is a coap demo!\\\\r\\\\n\");", "printf(\"Tx done, Count:%d\\\\r\\\\n\",i+1);", "printf(\"Tx\\\\r\\\\n\");", "printf(\"Wrong parameters value: file %s on line %d\\\\r\\\\n\", file, line);", "printf(\"\\\\r\\\\nALIENTEK \u6218\u8230STM32\u5f00\u53d1\u677f \u4e32\u53e3\u5b9e\u9a8c\\\\r\\\\n\");", "printf(\"\\\\r\\\\n\\\\r\\\\n\");", "printf(\"\\\\r\\\\n\u60a8\u53d1\u9001\u7684\u6d88\u606f\u4e3a:\\\\r\\\\n\");", "printf(\"\\\\thclk %u\\\\n\", HAL_RCC_GetHCLKFreq());", "printf(\"\\\\tpclk1 %u\\\\n\", HAL_RCC_GetPCLK1Freq());", "printf(\"\\\\tpclk2 %u\\\\n\", HAL_RCC_GetPCLK2Freq());", "printf(\"\\\\tsysclk %u\\\\n\", HAL_RCC_GetSysClockFreq());", "printf(\"clocks:\\\\n\");", "printf(\"energyest tx:%lu\",energest_type_time(ENERGEST_TYPE_TRANSMIT));", "printf(\"finish!!\\\\r\\\\n\");", "printf(\"unique id: 0x%08x%08x%08x\\\\n\", stm32_unique_id[0], stm32_unique_id[1], stm32_unique_id[2]);", "printf(\"\u6b63\u70b9\u539f\u5b50@ALIENTEK\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\");", "prvSetupHardware();", "ptCentral->process_time.controlTaskTime = c4-c1;", "ptCentral->ptActuatorHub->moveJoint(ptCentral->ptActuatorHub,0);", "ptCentral->ptControlHub->control(ptCentral->ptControlHub,0);", "ptCentral->updateData(ptCentral);", "reg_addr = (uint16_t) cmdifGetParam(3);", "ret = HAL_PWREx_EnableOverDrive();", "ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);", "ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);", "ret = false;", "ret = true;", "return (flashes < 2) ? BUTTON_PRESSED : BUTTON_HOLD_ABORTED;", "return 0;", "return BUTTON_HELD;", "return BUTTON_UNCHANGED;", "return HAL_GPIO_ReadPin(LIS3DE_INT1_GPIO_PORT, LIS3DE_INT1_PIN);", "return HAL_GPIO_ReadPin(LSM6DS3_INT1_GPIO_PORT, LSM6DS3_INT1_PIN);", "return LOS_NOK;", "return NX_SUCCESS;", "return count;", "return rtn;", "return status;", "return uart_at_send(buf, len, timeout);", "return;", "rtn = event_wait(&interrupt_evtque, 0, timeout);", "sensorSendReqToGateway(req, responseExpected);", "sensor_t sensor_data;", "serial_putc(hex);", "setTime((RTC_YEAR-1970)*365*24*60*60 + RTC_MONTH*30*24*60*60 + RTC_DAY*24*60*60);", "shell_uart_init(115200);", "sprintf((char*)tx_buffer,", "sprintf((char*)tx_buffer, \"Acceleration [mg]:%4.2f\\\\t%4.2f\\\\t%4.2f\\\\r\\\\n\",", "sprintf((char*)tx_buffer, \"Angular rate [mdps]:%4.2f\\\\t%4.2f\\\\t%4.2f\\\\r\\\\n\",", "sprintf((char*)tx_buffer, \"D-Tap: \");", "sprintf((char*)tx_buffer, \"S-Tap: \");", "sprintf(numStr,\"%.*f\",decimalPoints, number);", "static int ether_select(struct st_device *dev, unsigned int timeout)", "static int32_t platform_read_int_pin(void)", "static int32_t platform_reap_int_pin(void)", "static ssize_t  __at_write (void *pri,size_t offset, const void *buf,size_t len,uint32_t timeout)", "static void CPU_CACHE_Enable(void)", "static void Error_Handler(void)", "static void SendSigfox(void)", "static void SystemClock_Config(void)", "static void prvSetupHardware( void )", "static void reverse(uint8_t *begin, uint8_t *end)", "stm32_flash_init();", "stm32_timer_init();", "stm32_usbc_init();", "strcat((char*)tx_buffer, \" negative\");", "strcat((char*)tx_buffer, \" positive\");", "strcat((char*)tx_buffer, \" sign\\\\r\\\\n\");", "strcat((char*)tx_buffer, \"x-axis\");", "strcat((char*)tx_buffer, \"y-axis\");", "strcat((char*)tx_buffer, \"z-axis\");", "switch (Led)", "switch (count) {", "temperature_degC = lsm6dsox_from_lsb_to_celsius(data_raw_temperature.i16bit);", "temperature_degC);", "tfp_printf(\"%08u: Hello world (@%uMHz)!\\\\n\\\\r\",counter++,SystemCoreClock/1000000);", "time_t      t       = 12345;", "times++;", "tmp = *begin;", "tos_task_delay(1000);", "tx_com(tx_buffer, strlen((char const*)tx_buffer));", "tx_thread_sleep(NX_IP_PERIODIC_RATE);", "u16 times = 0;", "u8 len;", "uart_init(115200);", "uart_rx_cb(1);", "uint16_t batteryLevel = SYS_GetBatteryLevel();", "uint16_t datarate,i;", "uint16_t dev_addr;", "uint16_t humidity = 0;", "uint16_t i=0;", "uint16_t ledButtonCheck()", "uint16_t length;", "uint16_t pressure = 0;", "uint16_t reg_addr;", "uint32_t  ul_size = 0;", "uint32_t basePeriodCnt = 0;", "uint32_t beganSecs = NoteTimeST();", "uint32_t counter;", "uint32_t currentDelayMs = 750;", "uint32_t elapsed = NoteTimeST() - beganSecs;", "uint32_t expireSecs = 15;", "uint32_t i;", "uint32_t nbTxRepeatFlag = 1;", "uint32_t prevQuartile = 0;", "uint32_t quartile = elapsed / (expireSecs/4);", "uint8_t ch;", "uint8_t data;", "uint8_t data_0x001D004E[64] = {0x40, 0x4E, 0x00, 0x1D, 0x00, 0x00, 0x01, 0x00, 0x02, 0x50, 0xEE, 0xEC, 0x5F, 0x44, 0x0C, 0xFA, 0xC3, 0x36, 0xC8, 0xD6, 0x28, 0x90, 0xBC, 0x6E, 0xAC, 0x66, 0x03, 0xEF, 0x19, 0xCC, 0x36, 0x9C, 0x5A, 0xF9, 0xF0, 0x22, 0x02, 0xB3, 0xEE, 0x4D, 0x7B, 0x77, 0x70, 0xBB, 0x12, 0xAE, 0x85, 0x73, 0xA6, 0x5C, 0x4A, 0x46, 0xEA, 0x13, 0x61, 0x8E, 0x19, 0xA2, 0xC5, 0x81, 0x53, 0x65, 0x1F, 0x3F};", "uint8_t data_0x00420029[64] = {0x40, 0x29, 0x00, 0x42, 0x00, 0x00, 0x01, 0x00, 0x02, 0xF2, 0x54, 0x99, 0xDE, 0x08, 0xC8, 0x64, 0xCC, 0x89, 0xB8, 0x1E, 0x3E, 0x3D, 0x54, 0xE9, 0x70, 0x55, 0x66, 0x22, 0x95, 0x31, 0x81, 0x97, 0x2C, 0xB3, 0xC7, 0x43, 0x75, 0xB4, 0x56, 0x4B, 0x40, 0xBB, 0xAB, 0x93, 0xB3, 0x03, 0x8A, 0xA0, 0x7D, 0xBE, 0xB2, 0xDB, 0x51, 0x50, 0xD0, 0x61, 0x25, 0xA5, 0xEA, 0x50, 0xF7, 0x82, 0x4F, 0xC9};", "uint8_t dl_msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};", "uint8_t hex = val >> 4;", "uint8_t i2c_data[128];", "uint8_t i;", "uint8_t print_ch;", "uint8_t tmp;", "uint8_t ul_msg[12] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11};", "uint8_t whoamI, rst;", "ul_msg[ul_size++] = (humidity >> 8) & 0xFF;", "ul_msg[ul_size++] = (pressure >> 8) & 0xFF;", "ul_msg[ul_size++] = (temperature >> 8) & 0xFF;", "ul_msg[ul_size++] = (uint8_t)((batteryLevel * 100) / 3300);", "ul_msg[ul_size++] = humidity & 0xFF;", "ul_msg[ul_size++] = pressure & 0xFF;", "ul_msg[ul_size++] = temperature & 0xFF;", "unix_time_callback,", "uwRet = LOS_KernelInit();", "vTaskDelayUntil(&xLastWakeTime,EthCyclicTaskPeriod);", "void * arg = NULL ;", "void CallConstructors(void)", "void Error_Handler(void)", "void Error_handler(void)", "void EthCyclicTaskFunc(void const * argument)", "void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac)", "void HAL_Delay(__IO uint32_t Delay)", "void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)", "void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htimer)", "void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)", "void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)", "void HardFault_Handler(void)", "void IRx_SYNC_IRQHandler(void)", "void LCD1602_PrintFloat(float number, int decimalPoints)", "void LPM_EnterSleepMode( void)", "void SFU_TEST_Error(void)", "void SPI3_IRQHandler(void)", "void StartBlinkLedTask(void const * argument)", "void SystemClock_Config(void)", "void TIM3_IRQHandler(void)", "void USART1_IRQHandler(void)", "void application_entry(void *arg)", "void assert_failed (uint8_t *file, uint32_t line)", "void assert_failed( uint8_t* file, uint32_t line )", "void assert_failed(char *file, uint32_t line)", "void assert_failed(uint8_t *file, uint32_t line)", "void assert_failed(uint8_t* file, uint32_t line)", "void atiny_reboot(void)", "void cliGpio(cli_args_t *args)", "void example_main_double_tap_lsm6dsox(void)", "void example_main_lsm6dsox(void)", "void i2cCmdif(void)", "void leds_off (void)", "void main_entry(void)", "void noteSendToGatewayAsync(J *req, bool responseExpected)", "void platform_init(void)", "void serial_puth(uint8_t val)", "void system_init(void)", "while (1)", "while (1) {", "while (1);", "while (NoteTimeST() < beganSecs+expireSecs) {", "while (TRUE) {", "while (__HAL_UART_GET_FLAG(&hUART, UART_FLAG_TXE) != SET)", "while (begin < end) {", "while (true)", "while( !__HAL_PWR_GET_FLAG( PWR_FLAG_VOSRDY ) )", "while( 1 )", "while(1)", "while(1) { ; }", "while(1) { }", "while(1);", "while(__HAL_UART_GET_FLAG(&UART1_Handler, UART_FLAG_TC) != SET);", "while(cliKeepLoop())", "write_gpio(led1, HIGH);", "write_gpio(led1, LOW);", "write_gpio(led2, HIGH);", "write_gpio(led2, LOW);", "write_gpio(led3, HIGH);", "write_gpio(led3, LOW);", "write_gpio(led4, LOW);", "write_gpio(led5, LOW);", "write_gpio(led6, LOW);", "x = fitted_position_x(Ladc1 - Ladc3, Ladc2);", "y = - fitted_position_y(Ladc1 - Ladc3, Ladc2);", "{}", "|GPIO_PIN_12);", "|RCC_CLOCKTYPE_PCLK1;", "|| (datetimestring[5] == '0' && key_pressed >= '1'", "}   else if(huart->Instance==USART3)", "} while (rst);"]}